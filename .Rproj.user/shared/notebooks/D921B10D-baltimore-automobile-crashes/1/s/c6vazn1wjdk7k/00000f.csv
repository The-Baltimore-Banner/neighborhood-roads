"0",""
"0","for (input_year in years){"
"0","  "
"0","  grouped_accidents <- accidents%>%"
"0","    filter(!is.na(clean_name),"
"0","           year == input_year) %>%"
"0","    group_by(clean_name, neighborhood) %>%"
"0","    summarise(accidents = n()) %>%"
"0","    clean_names() %>%"
"0","    left_join(census) %>%"
"0","    mutate(accidents = as.double(accidents)) %>%"
"0","    mutate(accidents_per_1k = (accidents/(x2020_pop/1000))) %>%"
"0","    ungroup() %>%"
"0","    #test <- grouped_accidents %>%"
"0","    mutate(part = case_when("
"0","      clean_name %in% principal_arteries$clean_name ~ TRUE,"
"0","      TRUE ~ FALSE"
"0","    ))"
"0","  "
"0","  mutated_grouped_accidents <- grouped_accidents %>%"
"0","    #filtering for top 75%"
"0","      #this is the quantile from line 227"
"0","    filter(x2020_pop >= quantile) %>%"
"0","    mutate(rank_raw = order(order(accidents, decreasing = TRUE))) %>%"
"0","    mutate(rank_per_1k = rank(desc(accidents_per_1k))) %>%"
"0","    arrange(rank_per_1k)"
"0","  "
"0","  output <- mutated_grouped_accidents %>%"
"0","    slice(1:10)%>%"
"0","    #arrange(neighborhood)"
"0","    arrange(desc(accidents_per_1k)) %>%"
"0","    rename(!!as.character(input_year) := clean_name)"
"0","  "
"0","  print(output)"
"0",""
"0","}"
"1","[38;5;250m`summarise()` has grouped output by 'clean_name'. You can override using the `.groups` argument.[39m
"
"1","[38;5;250mJoining, by = ""neighborhood""[39m
"
